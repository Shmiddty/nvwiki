const fs = require('fs').promises
const atl = require('atlas-parser')
const wiki = require('./wiki.js')
const db = require('./db.js')
const bot = require('mwbot')
const jimp = require('jimp')
const { stagger, mwContinuedRequest } = require('./util.js')
const { apiUrl, apiLimit, concurrency } = require('./mwconfig.json')

function debug(...args) {
  console.log(...args)
}

const client = new bot({
  verbose: true,
  concurrency
})

function str(o) {
  return o.toString()
}

Promise.all([
  fs
    .readFile('./credentials.secret')
    .then(str)
    .then((str) => str.split('\n')),
  fs.readFile('./lib/nv/gamedata.json').then(str).then(JSON.parse),
  fs.readFile('./lib/nv/UI.atlas').then(str).then(atl.parse),
  jimp.read('./lib/nv/UI.png')
]).then(async ([[username, password], data, ui, UI /*, ch */]) => {
  await client.loginGetEditToken({
    apiUrl,
    username,
    password
  })

  const exImgs = await mwContinuedRequest(client, {
    action: 'query',
    list: 'allimages',
    ailimit: 500
  }).then((imgs) => {
    return imgs.map((i) => i.name.toLowerCase().replace('_', '/').slice(0, -4))
  })
  const imgs = Object.entries(ui['UI.png'].frames).filter(
    ([k]) => k.includes('icons') && !exImgs.includes(k)
  )

  await stagger(imgs, apiLimit.count, apiLimit.period, (chn) =>
    bot
      .map(chn, async ([k, v]) => {
        const fname = k.replace('/', '_') + '.png'
        await UI.clone()
          .crop(...v.xy, ...v.size)
          .write(`./dist/${fname}`)
        debug('Uploading:', fname)
        return client.upload(
          false,
          `./dist/${fname}`,
          'Uploaded by nvwikibot',
          {
            text: wiki.license('Casey Clyde')
          }
        )
      })
      .then(debug)
      .catch(console.error)
  )

  const $db = db(data)

  const eqByType = await $db.equipmentByType()

  await bot
    .map(Object.entries(eqByType), ([key, val]) => {
      const content = [
        wiki.pagetype('item'),
        wiki.table(
          [
            'Icon',
            'Name',
            'Rarity',
            'Category',
            'Description',
            'Stats',
            'Flavor Text'
          ],
          val
            .sort(
              (a, b) => (a.rarity - b.rarity) * 2 + a.name.localeCompare(b.name)
            )
            .map((i) => [
              wiki.icon(i.icon),
              wiki.page(i.name),
              `data-sort-value=${i.rarity}| ${wiki.rarity(i.rarity)}`,
              i.category,
              i.description,
              wiki.stats(i.properties),
              i.flavor
            ])
        )
      ].join('\n')
      return client.edit(key, content, 'Generated by nvwikibot')
    })
    .then(debug)
    .catch(console.error)
})
