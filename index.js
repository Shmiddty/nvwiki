const fs = require('fs').promises
const atl = require('atlas-parser')
const wiki = require('./wiki.js')
const db = require('./db.js')
const bot = require('nodemw')
const util = require('util')
const jimp = require('jimp')

function debug(...args) {
  if (process.env.DRY_RUN !== '1') return
  console.log(...args)
}

function promisify(obj, funcs = []) {
  funcs.forEach((k) => {
    obj[k] = util.promisify(obj[k].bind(obj))
  })
  return obj
}

const client = promisify(new bot('mwconfig.json'), [
  'logIn',
  'getAllPages',
  'upload',
  'edit'
])

function str(o) {
  return o.toString()
}

function rarityColor(rarityId) {
  return ['white', 'blue', 'yellow', '#cc5500', 'green'][rarityId]
}

Promise.all([
  fs
    .readFile('./credentials.secret')
    .then(str)
    .then((str) => str.split('\n')),
  fs.readFile('./lib/nv/gamedata.json').then(str).then(JSON.parse),
  fs.readFile('./lib/nv/UI.atlas').then(str).then(atl.parse),
  jimp.read('./lib/nv/UI.png')
  //fs.readFile('./lib/nv/Characters.atlas').then(str).then(atl.parse)
]).then(async ([[uname, pw], data, ui, UI /*, ch */]) => {
  const auth = await client.logIn(uname, pw)

  debug(auth)

  Object.entries(ui['UI.png'].frames)
    .filter(([k]) => k.includes('icons'))
    .forEach(([k, v]) => {
      UI.clone()
        .crop(...v.xy, ...v.size)
        .write(`./dist/${k.replace('/', '_')}.png`)
    })

  const $db = db(data)

  const eqByType = await $db.equipmentByType()

  Promise.all(
    Object.entries(eqByType).map(([key, val]) => {
      const content = [
        wiki.pagetype('item'),
        wiki.table(
          ['Icon', 'Name', 'Rarity', 'Category', 'Description', 'Flavor Text'],
          val
            .sort(
              (a, b) =>
                (a.rarityId - b.rarityId) * 2 + a.name.localeCompare(b.name)
            )
            .map((i) => [
              wiki.icon(i.icon),
              i.name,
              `data-sort-value=${i.rarityId} style="color:${rarityColor(i.rarityId)};font-weight:bold"| ${i.rarity}`,
              i.category,
              i.description,
              i.flavor
            ])
        )
      ].join('\n')
      debug(content)
      return client.edit(key, content, 'Generated by nvwikibot', true)
    })
  )
    .then(() => debug('Success'))
    .catch(console.error)
})
