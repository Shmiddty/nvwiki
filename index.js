const fs = require('fs').promises
const atl = require('atlas-parser')
const wiki = require('./wiki.js')
const db = require('./db.js')
const bot = require('mwbot')
//const util = require('util')
const jimp = require('jimp')

const cfg = require('./mwconfig.json')

function debug(...args) {
  if (process.env.DRY_RUN !== '1') return
  console.log(...args)
}

//function promisify(obj, funcs = []) {
//  funcs.forEach((k) => {
//    obj[k] = util.promisify(obj[k].bind(obj))
//  })
//  return obj
//}

const client = new bot({
  verbose: true,
  concurrency: 4
}) //promisify(new bot('mwconfig.json'), ['logIn', 'upload', 'edit'])

function str(o) {
  return o.toString()
}

function rarityColor(rarityId) {
  return ['white', 'blue', 'yellow', '#cc5500', 'green'][rarityId]
}

Promise.all([
  fs
    .readFile('./credentials.secret')
    .then(str)
    .then((str) => str.split('\n')),
  fs.readFile('./lib/nv/gamedata.json').then(str).then(JSON.parse),
  fs.readFile('./lib/nv/UI.atlas').then(str).then(atl.parse),
  jimp.read('./lib/nv/UI.png')
]).then(async ([[username, password], data, ui, UI /*, ch */]) => {
  const auth = await client.loginGetEditToken({
    apiUrl: cfg.apiUrl,
    username,
    password
  })

  debug(auth)

  const exImgs = await client
    .request({
      action: 'query',
      list: 'allimages',
      ailimit: 600
    })
    .then((r) =>
      r.query.allimages.map((i) =>
        i.name.toLowerCase().replace('_', '/').slice(0, -4)
      )
    )

  await bot
    .map(
      Object.entries(ui['UI.png'].frames).filter(
        ([k]) => k.includes('icons') && !exImgs.includes(k)
      ),
      async ([k, v]) => {
        const fname = k.replace('/', '_') + '.png'
        await UI.clone()
          .crop(...v.xy, ...v.size)
          .write(`./dist/${fname}`)

        return client.upload(
          false,
          `./dist/${fname}`,
          'Uploaded by nvwikibot',
          {
            text: wiki.license('Casey Clyde')
          }
        )
      },
      { concurrency: 2 }
    )
    .then(debug)
    .catch(console.error)

  const $db = db(data)

  const eqByType = await $db.equipmentByType()

  await Promise.all(
    Object.entries(eqByType).map(([key, val]) => {
      const content = [
        wiki.pagetype('item'),
        wiki.table(
          ['Icon', 'Name', 'Rarity', 'Category', 'Description', 'Flavor Text'],
          val
            .sort(
              (a, b) =>
                (a.rarityId - b.rarityId) * 2 + a.name.localeCompare(b.name)
            )
            .map((i) => [
              wiki.icon(i.icon),
              i.name,
              `data-sort-value=${i.rarityId} style="color:${rarityColor(i.rarityId)};font-weight:bold"| ${i.rarity}`,
              i.category,
              i.description,
              i.flavor
            ])
        )
      ].join('\n')
      debug(content)
      return client.edit(key, content, 'Generated by nvwikibot')
    })
  )
    .then(debug)
    .catch(console.error)
})
