const fs = require('fs').promises
const wiki = require('./wiki.js')
const db = require('./db.js')
const bot = require('mwbot')
const cliProgress = require('cli-progress')
const { str, debug, stagger } = require('./util.js')
const { apiUrl, apiLimit, concurrency } = require('./mwconfig.json')

const DRY = process.env.DRY_RUN === '1'

const client = new bot({
  verbose: true,
  concurrency
})

function varied(a, p) {
  return a.some((v) => a[0][p] !== v[p])
}
const prog = new cliProgress.SingleBar(
  {
    format: '{bar} | {percentage}% | ETA: {eta}s | {value}/{total} | {name}'
  },
  cliProgress.Presets.shades_classic
)

Promise.all([
  fs
    .readFile('./credentials.secret')
    .then(str)
    .then((str) => str.split('\n')),
  fs.readFile('./lib/nv/gamedata.json').then(str).then(JSON.parse)
]).then(async ([[username, password], data]) => {
  await client.loginGetEditToken({
    apiUrl,
    username,
    password
  })
  const $db = db(data)

  const eqByType = await $db.equipmentByType()
  const eqByCategory = await $db.equipmentByCategory()
  // remove Type/Category overlaps
  Object.keys(eqByType).forEach((k) => {
    delete eqByCategory[k]
  })
  const eqByRarity = await $db.equipmentByRarity()
  const stats = await $db.stats()
  const equipment = await $db.equipment()
  const eqByStat = stats
    .map((s) => [
      s.display,
      equipment.filter((e) => e.properties.some((p) => p.stat === s.id))
    ])
    .filter(
      ([n, p], i, a) => p.length > 0 && a.findIndex(([N]) => n === N) === i
    )

  const entries = [].concat(
    Object.entries(eqByType).map(([k, v]) => [0, k, v]),
    Object.entries(eqByCategory).map(([k, v]) => [1, k, v]),
    Object.entries(eqByRarity).map(([k, v]) => [2, k, v]),
    eqByStat.map(([k, v]) => [3, k, v])
  )

  console.log('\nUpdating pages:\n')
  prog.start(entries.length, 0, { name: '' })

  const timeStep = Math.ceil(apiLimit.period / apiLimit.count)
  await stagger(entries, timeStep, ([t, key, val], i) => {
    prog.update(i + 1, { name: key })
    const content = wiki.cargoItemQuery(
      [
        `type='${key}'`,
        `category='${key}'`,
        `rarity='${key}'`,
        `properties LIKE '%${key}%'`
      ][t],
      {
        category: !val.some((v) => v.category !== key),
        type: !val.some((v) => v.type !== key),
        rarity: !val.some((v) => v.rarity !== key),
        stats: !val.some((i) => i.properties.length),
        description: !val.some((i) => i.description.length),
        flavor: !val.some((i) => i.flavor.length),
        power: !val.some((i) => i.power_cost > 0)
      }
    )
    if (DRY) {
      debug(content)
      return
    }
    return client
      .edit(key, content, 'Generated by nvwikibot')
      .catch(console.error)
  }).finally(() => prog.stop())
})
