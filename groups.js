const fs = require('fs').promises

const wiki = require('./wiki.js')
const db = require('./db.js')
const bot = require('mwbot')
const { str, debug, stagger } = require('./util.js')
const { apiUrl, apiLimit, concurrency } = require('./mwconfig.json')

const DRY = process.env.DRY_RUN === '1'

const client = new bot({
  verbose: true,
  concurrency
})

Promise.all([
  fs
    .readFile('./credentials.secret')
    .then(str)
    .then((str) => str.split('\n')),
  fs.readFile('./lib/nv/gamedata.json').then(str).then(JSON.parse)
]).then(async ([[username, password], data]) => {
  await client.loginGetEditToken({
    apiUrl,
    username,
    password
  })
  const $db = db(data)

  const eqByType = await $db.equipmentByType()

  await bot
    .map(Object.entries(eqByType), ([key, val]) => {
      const showCategory = val.some((i) => i.category !== i.type)
      const showStats = val.some((i) => i.properties.length)
      const showFlavor = val.some((i) => !!i.flavor)

      const content = [
        wiki.pagetype('item'),
        wiki.table(
          [
            'Icon',
            'Name',
            'Rarity',
            showCategory && 'Category',
            'Description',
            showStats && 'Stats',
            showFlavor && 'Flavor Text'
          ].filter(Boolean),
          val
            .sort(
              (a, b) => (a.rarity - b.rarity) * 2 + a.name.localeCompare(b.name)
            )
            .map((i) =>
              [
                wiki.icon(i.icon),
                wiki.page(i.name),
                `data-sort-value=${i.rarity}| ${wiki.rarity(i.rarity)}`,
                showCategory && wiki.page(i.category),
                i.description,
                showStats && wiki.stats(i.properties),
                showFlavor && i.flavor
              ].filter((v) => v !== false)
            )
        )
      ].join('\n')
      if (DRY) {
        debug(content)
        return
      }
      return client.edit(key, content, 'Generated by nvwikibot')
    })
    .then(debug)
    .catch(console.error)

  const eqByCategory = await $db.equipmentByCategory()
  // remove Type/Category overlaps
  Object.keys(eqByType).forEach((k) => {
    delete eqByCategory[k]
  })

  await bot
    .map(Object.entries(eqByCategory), ([key, val]) => {
      const showType = val.some((i) => i.category !== i.type)
      const showStats = val.some((i) => i.properties.length)
      const showFlavor = val.some((i) => !!i.flavor)

      const content = [
        wiki.pagetype('item'),
        wiki.table(
          [
            'Icon',
            'Name',
            'Rarity',
            showType && 'Type',
            'Description',
            showStats && 'Stats',
            showFlavor && 'Flavor Text'
          ].filter(Boolean),
          val
            .sort(
              (a, b) => (a.rarity - b.rarity) * 2 + a.name.localeCompare(b.name)
            )
            .map((i) =>
              [
                wiki.icon(i.icon),
                wiki.page(i.name),
                `data-sort-value=${i.rarity}| ${wiki.rarity(i.rarity)}`,
                showType && wiki.page(i.type),
                i.description,
                showStats && wiki.stats(i.properties),
                showFlavor && i.flavor
              ].filter((v) => v !== false)
            )
        )
      ].join('\n')
      if (DRY) {
        debug(content)
        return
      }
      return client.edit(key, content, 'Generated by nvwikibot')
    })
    .then(debug)
    .catch(console.error)

  const eqByRarity = await $db.equipmentByRarity()

  await bot
    .map(Object.entries(eqByRarity), ([key, val]) => {
      const content = [
        wiki.pagetype('rarity'),
        wiki.table(
          [
            'Icon',
            'Name',
            'Type',
            'Category',
            'Description',
            'Stats',
            'Flavor Text'
          ],
          val
            .sort((a, b) => a.name.localeCompare(b.name))
            .map((i) => [
              wiki.icon(i.icon),
              wiki.page(i.name),
              wiki.page(i.type),
              wiki.page(i.category),
              i.description,
              wiki.stats(i.properties),
              i.flavor
            ])
        )
      ].join('\n')
      if (DRY) {
        debug(content)
        return
      }
      return client.edit(key, content, 'Generated by nvwikibot')
    })
    .then(debug)
    .catch(console.error)

  const stats = await $db.stats()
  const equipment = await $db.equipment()
  const eqByStat = stats
    .map((s) => [
      s.display,
      equipment.filter((e) => e.properties.some((p) => p.stat === s.id))
    ])
    .filter(
      ([n, p], i, a) => p.length > 1 && a.findIndex(([N]) => n === N) === i
    )

  await stagger(eqByStat, apiLimit.count / 2, apiLimit.period, (chn) =>
    bot
      .map(chn, ([key, val]) => {
        const content = [
          wiki.pagetype('stat'),
          wiki.table(
            [
              'Icon',
              'Name',
              'Rarity',
              'Type',
              'Category',
              'Description',
              'Stats',
              'Flavor Text'
            ],
            val
              .sort(
                (a, b) =>
                  (a.rarity - b.rarity) * 2 + a.name.localeCompare(b.name)
              )
              .map((i) => [
                wiki.icon(i.icon),
                wiki.page(i.name),
                `data-sort-value=${i.rarity}| ${wiki.rarity(i.rarity)}`,
                wiki.page(i.type),
                wiki.page(i.category),
                i.description,
                wiki.stats(i.properties),
                i.flavor
              ])
          )
        ].join('\n')
        if (DRY) {
          debug(content)
          return
        }
        return client.edit(key, content, 'Generated by nvwikibot')
      })
      .then(debug)
      .catch(console.error)
  )
})
