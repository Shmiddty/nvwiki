const fs = require('fs').promises
const wiki = require('./wiki.js')
const db = require('./db.js')
const bot = require('mwbot')
const { str, debug, stagger } = require('./util.js')
const { apiUrl, apiLimit, concurrency } = require('./mwconfig.json')

const DRY = process.env.DRY_RUN === '1'

const client = new bot({
  verbose: true,
  concurrency
})

function varied(a, p) {
  return a.some((v) => a[0][p] !== v[p])
}

Promise.all([
  fs
    .readFile('./credentials.secret')
    .then(str)
    .then((str) => str.split('\n')),
  fs.readFile('./lib/nv/gamedata.json').then(str).then(JSON.parse)
]).then(async ([[username, password], data]) => {
  await client.loginGetEditToken({
    apiUrl,
    username,
    password
  })
  const $db = db(data)

  const eqByType = await $db.equipmentByType()
  const eqByCategory = await $db.equipmentByCategory()
  // remove Type/Category overlaps
  Object.keys(eqByType).forEach((k) => {
    delete eqByCategory[k]
  })
  const eqByRarity = await $db.equipmentByRarity()
  const stats = await $db.stats()
  const equipment = await $db.equipment()
  const eqByStat = stats
    .map((s) => [
      s.display,
      equipment.filter((e) => e.properties.some((p) => p.stat === s.id))
    ])
    .filter(
      ([n, p], i, a) => p.length > 1 && a.findIndex(([N]) => n === N) === i
    )

  const entries = [].concat(
    Object.entries(eqByType),
    Object.entries(eqByCategory),
    Object.entries(eqByRarity),
    eqByStat
  )
  await stagger(entries, apiLimit.count / 2, apiLimit.period, (chn) =>
    bot
      .map(chn, ([key, val]) => {
        const showCategory = varied(val, 'category')
        const showType = varied(val, 'type')
        const showRarity = varied(val, 'rarity')
        const showStats = val.some((i) => i.properties.length)
        const showDescription = val.some((i) => i.description.length)
        const showFlavor = val.some((i) => i.flavor.length)
        const showPower = val.some((i) => i.power_cost > 0)

        const content = [
          wiki.pagetype('item'),
          wiki.table(
            [
              'Icon',
              'Name',
              showRarity && 'Rarity',
              showType && 'Type',
              showCategory && 'Category',
              showDescription && 'Description',
              showPower && 'Power Cost',
              showPower && 'Power Description',
              showStats && 'Stats',
              showFlavor && 'Flavor Text'
            ].filter(Boolean),
            val
              .sort(
                (a, b) =>
                  (a.rarity - b.rarity) * 2 + a.name.localeCompare(b.name)
              )
              .map((i) =>
                [
                  wiki.icon(i.icon),
                  wiki.page(i.name),
                  showRarity &&
                    `data-sort-value=${i.rarity}| ${wiki.rarity(i.rarity)}`,
                  showType && wiki.page(i.type),
                  showCategory && wiki.page(i.category),
                  showDescription && i.description,
                  showPower && i.power_cost,
                  showPower && i.power_description,
                  showStats && wiki.stats(i.properties),
                  showFlavor && i.flavor
                ].filter((v) => v !== false)
              )
          )
        ].join('\n')
        if (DRY) {
          debug(content)
          return
        }
        return client.edit(key, content, 'Generated by nvwikibot')
      })
      .then(debug)
      .catch(console.error)
  )
})
