const fs = require('fs').promises
const db = require('./db.js')
const bot = require('mwbot')
const { apiUrl, apiLimit, concurrency } = require('./mwconfig.json')
const { item } = require('./wiki.js')
const { stagger, mwContinuedRequest } = require('./util.js')
const toString = (o) => o.toString()

const client = new bot({
  verbose: true,
  quiet: false,
  concurrency
})

const OW = process.env.OW === '1'
const DMP = process.env.DMP === '1'

Promise.all([
  fs
    .readFile('./credentials.secret')
    .then(toString)
    .then((str) => str.split('\n')),
  fs.readFile('./lib/nv/gamedata.json').then(toString).then(JSON.parse)
]).then(async ([[username, password], data]) => {
  const $db = db(data)
  const eq = await $db.equipment()

  if (DMP) {
    console.log(eq.map(item).join('\n\n'))
    return
  }

  await client.loginGetEditToken({
    apiUrl,
    username,
    password
  })

  const exItems = await mwContinuedRequest(client, {
    action: 'query',
    list: 'allpages',
    aplimit: 500
  }).then((pages) => pages.map((i) => i.title))

  const items = eq.filter((i) => OW || !exItems.includes(i.name))
  stagger(items, apiLimit.count, apiLimit.period, (ceq) =>
    bot
      .map(ceq, (i) => client.edit(i.name, item(i), 'Generated by nvwikibot'))
      .then(console.log)
      .catch(console.error)
  ).then(() => console.log('done'))
})
