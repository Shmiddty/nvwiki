const fs = require('fs').promises
const wiki = require('./wiki.js')
const db = require('./db.js')
const bot = require('mwbot')
const cliProgress = require('cli-progress')
const { str, debug, stagger } = require('./util.js')
const { apiUrl, apiLimit, concurrency } = require('./mwconfig.json')

const DRY = process.env.DRY === '1'

const client = new bot({
  verbose: true,
  concurrency
})

const prog = new cliProgress.SingleBar(
  {
    format: '{bar} | {percentage}% | ETA: {eta}s | {value}/{total} | {name}'
  },
  cliProgress.Presets.shades_classic
)

Promise.all([
  fs
    .readFile('./credentials.secret')
    .then(str)
    .then((str) => str.split('\n')),
  fs.readFile('./lib/nv/gamedata.json').then(str).then(JSON.parse)
]).then(async ([[username, password], data]) => {
  await client.loginGetEditToken({
    apiUrl,
    username,
    password
  })
  const $db = db(data)

  const lvByArea = await $db.levelsByArea()
  const levels = await $db.levels()
  const lvByType = await $db.levelsByType()

  const entries = [
    ...levels.map((i) => [i.name, wiki.level(i)]),
    ['Levels', wiki.cargoLevelQuery(``)],
    ...Object.entries(lvByArea).map(([area, lvls]) => [
      area,
      wiki.cargoLevelQuery(`area='${area}'`, { area: true })
    ]),
    ...Object.entries(lvByType).map(([type, lvls]) => [
      type + ' Level',
      wiki.cargoLevelQuery(`type='${type}'`, { type: true })
    ])
  ]

  console.log('\nUpdating pages:\n')
  prog.start(entries.length, 0, { name: '' })

  const timeStep = Math.ceil(apiLimit.period / apiLimit.count)
  await stagger(entries, timeStep, ([key, content], i) => {
    prog.update(i + 1, { name: key })
    if (DRY) {
      debug('\n', content, '\n')
      return
    }
    return client
      .edit(key, content, 'Generated by nvwikibot')
      .catch(console.error)
  }).finally(() => prog.stop())
})
