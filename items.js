const fs = require('fs').promises
const db = require('./db.js')
const bot = require('mwbot')
const atl = require('atlas-parser')
const jimp = require('jimp')
const { apiUrl, apiLimit, concurrency } = require('./mwconfig.json')
const { item, license } = require('./wiki.js')
const { debug, str, stagger, mwContinuedRequest } = require('./util.js')
const toString = (o) => o.toString()

const client = new bot({
  verbose: true,
  quiet: false,
  concurrency
})

const DRY = process.env.DRY_RUN === '1'
const OW = process.env.OW === '1'
const DMP = process.env.DMP === '1'

Promise.all([
  fs
    .readFile('./credentials.secret')
    .then(toString)
    .then((str) => str.split('\n')),
  fs.readFile('./lib/nv/gamedata.json').then(toString).then(JSON.parse),
  fs.readFile('./lib/nv/UI.atlas').then(str).then(atl.parse),
  jimp.read('./lib/nv/UI.png')
]).then(async ([[username, password], data, ui, UI]) => {
  const $db = db(data)
  const eq = await $db.equipment()

  if (DMP) {
    console.log(eq.map(item).join('\n\n'))
    return
  }

  await client.loginGetEditToken({
    apiUrl,
    username,
    password
  })

  const exImgs = await mwContinuedRequest(client, {
    action: 'query',
    list: 'allimages',
    ailimit: 500
  }).then((imgs) => {
    return imgs.map((i) => i.name.toLowerCase().replace('_', '/').slice(0, -4))
  })
  const imgs = Object.entries(ui['UI.png'].frames).filter(
    ([k]) => k.includes('icons') && !exImgs.includes(k)
  )

  await stagger(imgs, apiLimit.count, apiLimit.period, (chn) =>
    bot
      .map(chn, async ([k, v]) => {
        const fname = k.replace('/', '_') + '.png'
        await UI.clone()
          .crop(...v.xy, ...v.size)
          .write(`./dist/${fname}`)
        debug('Uploading:', fname)
        if (DRY) return
        return client.upload(
          false,
          `./dist/${fname}`,
          'Uploaded by nvwikibot',
          {
            text: license('Casey Clyde')
          }
        )
      })
      .then(debug)
      .catch(console.error)
  )

  const exItems = await mwContinuedRequest(client, {
    action: 'query',
    list: 'allpages',
    aplimit: 500
  }).then((pages) => pages.map((i) => i.title))

  const items = eq.filter((i) => OW || !exItems.includes(i.name))
  stagger(items, apiLimit.count, apiLimit.period, (ceq) =>
    bot
      .map(ceq, (i) => {
        const content = item(i)
        if (DRY) {
          console.log(content)
          return
        }
        return client.edit(i.name, content, 'Generated by nvwikibot')
      })
      .then(console.log)
      .catch(console.error)
  ).then(() => console.log('done'))
})
